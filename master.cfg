# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from credentials_conf import SLAVES as cred_slaves
c['slaves'] = []
for name, passwd in cred_slaves:
    c['slaves'].append(BuildSlave(name, passwd))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  We use the listening service (PBChangeSource)

from buildbot.changes import pb
from credentials_conf import PB as pb_creds
c['change_source'] = pb.PBChangeSource(port=9989, user=pb_creds[0],
                                       passwd=pb_creds[1])

####### SCHEDULERS

# We currently have
#  - hgutils
#  - cps-3.5-base

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="hgutils",
        change_filter=filter.ChangeFilter(branch=None,
                                          repository_re='.*/hgutils$'),
        treeStableTimer=None,
        builderNames=["hgutils"]))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-base',
        change_filter=filter.ChangeFilter(
            branch='CPS-3.5',
            repository_re='.*/(products|zope2|legacy)/[^/]*'),
        builderNames=['CPS-3.5-base']))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-std',
        change_filter=filter.ChangeFilter(
            branch='CPS-3.5',
            repository_re='.*/(products|zope2|legacy)/[^/]*'),
        builderNames=['CPS-3.5-standard']))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-full',
        change_filter=filter.ChangeFilter(
            branch='CPS-3.5',
            repository_re='.*/(products|zope2|legacy)/[^/]*'),
        builderNames=['CPS-3.5-full']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.shell import ShellCommand

GLOB_PYTHON='/usr/bin/python'
hgutils = BuildFactory()
# check out the source
hgutils.addStep(Mercurial(repourl='http://hg.cps-cms.org/hgutils', mode='full', method='fresh', branchType='inrepo'))
hgutils.addStep(ShellCommand(command=[GLOB_PYTHON, "bootstrap.py"]))
hgutils.addStep(ShellCommand(command=["bin/buildout"]))
hgutils.addStep(ShellCommand(command=["bin/test"],
                             env=dict(PATH='/usr/local/bin:/usr/bin:/bin')))

MKCPS_35 = '/opt/cps-3.5/bin/mkcpsdevinstance'
MKCPS_36 = '/opt/cps-3.6/bin/mkcpsdevinstance'

def make_instance_cmd(branch, bundle):
    return ShellCommand(
        command=[
            MKCPS_35, '-b',
            'http://hg.cps-cms.org/bundles?subpath=%s&branch=%s' % (
                bundle, branch),
            '--no-portal', '--skip-existing', "instance"],
        description='setup')

pull_up = ShellCommand(
        command=['instance/Products/CPSUtil/bin/hgbundler-pull-up',
                 'instance'],
        description='update',
        env=dict(PATH='/opt/hgbundler/bin:/usr/local/bin:/usr/bin:/bin'),
        logfiles=dict(updatelog='instance/log/update.log'))

cps_tests = ShellCommand(command=['instance/Products/CPSUtil/bin/runalltests',
                                  'instance'],
                         description='testing')

cps35_base = BuildFactory()
cps35_base.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-base'))
cps35_base.addStep(pull_up)
cps35_base.addStep(cps_tests)

cps35_std = BuildFactory()
cps35_std.addStep(make_instance_cmd('CPS-3.5', 'CPS-3'))
cps35_std.addStep(pull_up)
cps35_std.addStep(cps_tests)

cps35_full = BuildFactory()
cps35_full.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-full'))
cps35_full.addStep(pull_up)
cps35_full.addStep(cps_tests)

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="hgutils",
      slavenames=["purity1", "purity2"], # TODO remove hardcoding of slaves
      factory=hgutils))

c['builders'].append(
    BuilderConfig(name="CPS-3.5-base",
                  slavenames=["purity1", "purity2"],
                  factory=cps35_base))

c['builders'].append(
    BuilderConfig(name="CPS-3.5-standard",
                  slavenames=["purity1", "purity2"],
                  factory=cps35_std))

c['builders'].append(
    BuilderConfig(name="CPS-3.5-full",
                  slavenames=["purity1", "purity2"],
                  factory=cps35_full))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Pyflakes"
c['titleURL'] = "http://divmod.org/trac/wiki/DivmodPyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

