# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from credentials_conf import SLAVES as cred_slaves
c['slaves'] = []
for name, passwd, _ in cred_slaves:
    c['slaves'].append(BuildSlave(name, passwd))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  We use the listening service (PBChangeSource)

from buildbot.changes import pb
from credentials_conf import PB as pb_creds
c['change_source'] = pb.PBChangeSource(port=9989, user=pb_creds[0],
                                       passwd=pb_creds[1])

####### SCHEDULERS

# We currently have
#  - hgutils
#  - cps-3.5-base

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="hgutils",
        change_filter=filter.ChangeFilter(branch=None,
                                          repository_re='.*/hgutils$'),
        treeStableTimer=None,
        builderNames=["hgutils"]))

# GR configuration for hgbundler change filter
import os
buildbot_basedir = os.path.split(__file__)[0]
from buildbot_utils import BundleChangeFilter
BundleChangeFilter.basedir = buildbot_basedir
# this expects changeset to be triggered by changegroup hook upon
# pull in a mirror with further structure of type <SERVER_URL>/path
# namely hg.cps-cms.org/products/CPSSchemas. The following class constant
# is the leading part of 'repository' in change object, before the mirror
# directory named after host name (hg.cps-cms.org in the example). You may
# need to tweak it
BundleChangeFilter.change_basedir = 'buildbot/miroirs'

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-base',
        change_filter=BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3-base',
            branch='CPS-3.5'),
        builderNames=['CPS-3.5-base-Zope-2.10',
                      'CPS-3.5-base-Zope-2.9',
                      ]))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-std',
        change_filter=BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3',
            branch='CPS-3.5'),
        builderNames=['CPS-3.5-standard-Zope-2.10',
                      'CPS-3.5-standard-Zope-2.9',
                      ]))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps35-full',
        change_filter=BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3-full',
            branch='CPS-3.5'),
        builderNames=['CPS-3.5-full-Zope-2.10',
                      'CPS-3.5-full-Zope-2.9',
                      'CPS-3.5-doc',
                      ]))


c['schedulers'].append(
    SingleBranchScheduler(
        name='cps36-base',
        change_filter = BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3-base',
            branch='default'),
        builderNames=['CPS-3.6-base',
                      ]))

c['schedulers'].append(
    SingleBranchScheduler(
        name='cps36-std',
        change_filter = BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3',
            branch='default'),
        builderNames=['CPS-3.6-standard',
                      ]))


c['schedulers'].append(
    SingleBranchScheduler(
        name='cps36-full',
        change_filter = BundleChangeFilter(
            'http://hg.cps-cms.org/bundles', path_in_repo='CPS-3-full',
            branch='default'),
        builderNames=['CPS-3.6-full',
                      'CPS-3.6-doc',
                      ]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.shell import ShellCommand

GLOB_PYTHON='/usr/bin/python'
import os
ENV_PATH = os.environ['PATH']

hgutils = BuildFactory()
# check out the source
hgutils.addStep(Mercurial(repourl='http://hg.cps-cms.org/hgutils', mode='full', method='fresh', branchType='inrepo'))
hgutils.addStep(ShellCommand(command=[GLOB_PYTHON, "bootstrap.py"]))
hgutils.addStep(ShellCommand(command=["bin/buildout"]))
hgutils.addStep(ShellCommand(command=["bin/test"],
                             env=dict(PATH='/usr/local/bin:/usr/bin:/bin')))

MKCPS = { # bundle branch -> command
    'CPS-3.5': '/opt/cps-3.5/bin/mkcpsdevinstance',
    'default': '/opt/cps-3.6/bin/mkcpsdevinstance',
    }

def make_instance_cmd(branch, bundle, zope_version=''):
    mkcps = MKCPS[branch]
    command=[mkcps, '-b',
             'http://hg.cps-cms.org/bundles?subpath=%s&branch=%s' % (bundle,
                                                                     branch),
             '--no-portal', '--skip-existing']
    if zope_version:
        command.extend(('--zope-version', zope_version))
    command.append('instance') # name of created instance
    return ShellCommand(command=command, description='setup',
                        haltOnFailure=True)

pull_up36 = ShellCommand(
        command=['/opt/cps-3.6/bin/hgbundler-pull-up', 'instance'],
        description='update',
        haltOnFailure=True,
        env=dict(PATH='/opt/hgbundler/bin:/usr/local/bin:/usr/bin:/bin'),
        logfiles=dict(updatelog='instance/log/update.log'))

pull_up35 = ShellCommand(
        command=['/opt/cps-3.5/bin/hgbundler-pull-up', 'instance'],
        description='update',
        haltOnFailure=True,
        env=dict(PATH='/opt/hgbundler/bin:/usr/local/bin:/usr/bin:/bin'),
        logfiles=dict(updatelog='instance/log/update.log'))

cps_tests = ShellCommand(command=['instance/Products/CPSUtil/bin/runalltests',
                                  'instance'],
                         env=dict(PATH='/opt/hgbundler/bin:' + ENV_PATH),
                         description='testing')

build_doc = ShellCommand(
    workdir='build/instance/Products',
    description='HTML conversion',
    haltOnFailure=True,
    command=['CPSUtil/docbuilder/build_cps_doc.py', '--html', '-f',
             '-x', 'CPSUtil/docbuilder/doc_directories.xml'
             ])

build_doc_index = ShellCommand(
    workdir='build/instance/Products',
    description='Index pages',
    haltOnFailure=True,
    command=['CPSUtil/docbuilder/build_cps_doc.py', '-i', '--html', '-f',
             '-x', 'CPSUtil/docbuilder/doc_directories.xml'
             ])

extract_doc = ShellCommand(command=[
        'rsync', '-rv', '--delete', '--delete-excluded','--prune-empty-dirs',
        "--filter=+ */", "--filter=+ *.html", "--filter=- *",
        'instance/Products/', 'doc'],
                           haltOnFailure=True,
                           description='extraction')

from buildbot.steps.transfer import DirectoryUpload

def deploy_doc_step(doc_version):
    return DirectoryUpload(
        slavesrc="doc",
        haltOnFailure=True,
        masterdest="/var/www/doc.cps-cms.org/%s" % doc_version,
        compress='gz',)
#   mentionned in bleeding edge buildbot doc, but not currently accepted:
#        url="http://doc.cps-cms.org/%s" % doc_version)

from buildbot.steps.master import MasterShellCommand
def allow_doc_step(doc_version):
    doc_dir = '/var/www/doc.cps-cms.org/%s' % doc_version
    return MasterShellCommand(
        description="permissions",
        command="chmod -R a+r %(dir)s; "
        "find %(dir)s -type d -exec chmod 755 {} \;" % dict(dir=doc_dir))


cps35_doc = BuildFactory()
cps35_doc.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-full'))
cps35_doc.addStep(pull_up35)
cps35_doc.addStep(build_doc)
cps35_doc.addStep(build_doc_index)
cps35_doc.addStep(extract_doc)
cps35_doc.addStep(deploy_doc_step('CPS-3.5-head'))
cps35_doc.addStep(allow_doc_step('CPS-3.5-head'))

cps35_base_z210 = BuildFactory()
cps35_base_z210.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-base',
                                          zope_version='2.10'))
cps35_base_z210.addStep(pull_up35)
cps35_base_z210.addStep(cps_tests)

cps35_std_z210 = BuildFactory()
cps35_std_z210.addStep(make_instance_cmd('CPS-3.5', 'CPS-3',
                                    zope_version='2.10'))
cps35_std_z210.addStep(pull_up35)
cps35_std_z210.addStep(cps_tests)

cps35_full_z210 = BuildFactory()
cps35_full_z210.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-full',
                                     zope_version='2.10'))
cps35_full_z210.addStep(pull_up35)
cps35_full_z210.addStep(cps_tests)

cps35_base_z29 = BuildFactory()
cps35_base_z29.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-base',
                                          zope_version='2.9'))
cps35_base_z29.addStep(pull_up35)
cps35_base_z29.addStep(cps_tests)

cps35_std_z29 = BuildFactory()
cps35_std_z29.addStep(make_instance_cmd('CPS-3.5', 'CPS-3',
                                    zope_version='2.9'))
cps35_std_z29.addStep(pull_up35)
cps35_std_z29.addStep(cps_tests)

cps35_full_z29 = BuildFactory()
cps35_full_z29.addStep(make_instance_cmd('CPS-3.5', 'CPS-3-full',
                                     zope_version='2.9'))
cps35_full_z29.addStep(pull_up35)
cps35_full_z29.addStep(cps_tests)

cps36_doc = BuildFactory()
cps36_doc.addStep(make_instance_cmd('default', 'CPS-3-full'))
cps36_doc.addStep(pull_up36)
cps36_doc.addStep(build_doc)
cps36_doc.addStep(build_doc_index)
cps36_doc.addStep(extract_doc)
cps36_doc.addStep(deploy_doc_step('CPS-head'))
cps36_doc.addStep(allow_doc_step('CPS-head'))

cps36_base = BuildFactory()
cps36_base.addStep(make_instance_cmd('default', 'CPS-3-base'))
cps36_base.addStep(pull_up36)
cps36_base.addStep(cps_tests)

cps36_std = BuildFactory()
cps36_std.addStep(make_instance_cmd('default', 'CPS-3'))
cps36_std.addStep(pull_up36)
cps36_std.addStep(cps_tests)

cps36_full = BuildFactory()
cps36_full.addStep(make_instance_cmd('default', 'CPS-3-full'))
cps36_full.addStep(pull_up36)
cps36_full.addStep(cps_tests)


BUILDER_TO_SLAVES = {}
for name, _, builders in cred_slaves:
    for b in builders:
        BUILDER_TO_SLAVES.setdefault(b, []).append(name)

from buildbot.config import BuilderConfig

def add_builder(builders, name, **kw):
    """Instantiate a builder and add it to builders list.

    Slaves are inferred from the BUILDER_TO_SLAVES dict (built from credentials
    configuration)
    """
    slavenames = BUILDER_TO_SLAVES.get(name)
    if not slavenames:
        # no slave for this builder in cred config
        return
    builders.append(BuilderConfig(name=name, slavenames=slavenames, **kw))


c['builders'] = []

add_builder(c['builders'], "hgutils", factory=hgutils)

## CPS 3.5

add_builder(c['builders'], "CPS-3.5-base-Zope-2.10", factory=cps35_base_z210)

add_builder(c['builders'], "CPS-3.5-standard-Zope-2.10", factory=cps35_std_z210)

add_builder(c['builders'], "CPS-3.5-full-Zope-2.10", factory=cps35_full_z210)

add_builder(c['builders'], "CPS-3.5-base-Zope-2.9", factory=cps35_base_z29)

add_builder(c['builders'], "CPS-3.5-standard-Zope-2.9", factory=cps35_std_z29)

add_builder(c['builders'], "CPS-3.5-full-Zope-2.9", factory=cps35_full_z29)

add_builder(c['builders'], "CPS-3.5-doc", factory=cps35_doc)

## CPS 3.6

add_builder(c['builders'], "CPS-3.6-base", factory=cps36_base)

add_builder(c['builders'], "CPS-3.6-standard", factory=cps36_std)

add_builder(c['builders'], "CPS-3.6-full", factory=cps36_full)

add_builder(c['builders'], "CPS-3.6-doc", factory=cps36_doc)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.mail import MailNotifier
from buildbot.status.web import authz
from buildbot.status.web.auth import BasicAuth
from credentials_conf import USERS
authz_cfg=authz.Authz(auth=BasicAuth(USERS),
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(MailNotifier(fromaddr='buildbot@cps-cms.org',
                                sendToInterestedUsers=False,
                                mode='change',
                                extraRecipients=['cps-devel@lists.cps-cms.org']))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "CPS Generic"
c['titleURL'] = "http://cps-cms.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.cps-cms.org/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

