# -*- python -*-
# ex: set syntax=python:

# This variant of CPS' master.cfg is for custom projects based on hgbundler
# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# we use two separate configuration modules
import credentials_conf # credentials for slaves and change sources
import custom_projects # information about schedulers and builders

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
for name, passwd in credentials_conf.SLAVES:
    c['slaves'].append(BuildSlave(name, passwd))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  We use the listening service (PBChangeSource)

from buildbot.changes import pb
from credentials_conf import PB as pb_creds
c['change_source'] = pb.PBChangeSource(port=9989, user=pb_creds[0],
                                       passwd=pb_creds[1])

####### SCHEDULERS

# GR configuration for hgbundler change filter
import os
buildbot_basedir = os.path.split(__file__)[0]
from buildbot_utils import BundleChangeFilter
BundleChangeFilter.basedir = buildbot_basedir
# this expects changeset to be triggered by changegroup hook upon
# pull in a mirror with further structure of type <SERVER_URL>/path
# namely hg.cps-cms.org/products/CPSSchemas. The following class constant
# is the leading part of 'repository' in change object, before the mirror
# directory named after host name (hg.cps-cms.org in the example). You may
# need to tweak it
BundleChangeFilter.change_basedir = 'buildbot/miroirs'

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = list(custom_projects.SCHEDULERS)
def add_cps_scheduler(slist, name, branch, path_in_repo):
    slist.append(
        SingleBranchScheduler(
            name=name,
            change_filter=BundleChangeFilter(
                branch=branch,
                path_in_repo=path_in_repo),
            builderNames=custom_projects.SCHED_BUILDS.get(name, [])
        ))

add_cps_scheduler(c['schedulers'], 'cps35-base', 'CPS-3.5', 'CPS-3-base')
add_cps_scheduler(c['schedulers'], 'cps35-std', 'CPS-3.5', 'CPS-3')
add_cps_scheduler(c['schedulers'], 'cps35-full', 'CPS-3.5', 'CPS-3-full')
add_cps_scheduler(c['schedulers'], 'cps36-base', 'default', 'CPS-3-base')
add_cps_scheduler(c['schedulers'], 'cps36-std', 'default', 'CPS-3')
add_cps_scheduler(c['schedulers'], 'cps36-full', 'default', 'CPS-3-full')


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.shell import ShellCommand

GLOB_PYTHON='/usr/bin/python'
import os
ENV_PATH = os.environ['PATH']

hgutils = BuildFactory()
# check out the source
hgutils.addStep(Mercurial(repourl='http://hg.cps-cms.org/hgutils', mode='full', method='fresh', branchType='inrepo'))
hgutils.addStep(ShellCommand(command=[GLOB_PYTHON, "bootstrap.py"]))
hgutils.addStep(ShellCommand(command=["bin/buildout"]))
hgutils.addStep(ShellCommand(command=["bin/test"],
                             env=dict(PATH='/usr/local/bin:/usr/bin:/bin')))

MKCPS = { # bundle branch -> command
    '3.5': '/opt/cps-3.5/bin/mkcpsdevinstance',
    'default': '/opt/cps-3.6/bin/mkcpsdevinstance',
    '3.6': '/opt/cps-3.6/bin/mkcpsdevinstance',
    }

def make_instance_cmd(bundle_url, branch, cps_version='default',
                      zope_version=''):
    mkcps = MKCPS[cps_version]
    # I don't know of a single custom project using subpath
    command=[mkcps, '-b', '%s?branch=%s' % (bundle_url, branch),
             '--no-portal', '--skip-existing']
    if zope_version:
        command.extend(('--zope-version', zope_version))
    command.append('instance') # name of created instance
    return ShellCommand(command=command, description='setup')

pull_up36 = ShellCommand(
        command=['/opt/cps-3.6/bin/hgbundler-pull-up', 'instance'],
        description='update',
        env=dict(PATH='/opt/hgbundler/bin:/usr/local/bin:/usr/bin:/bin'),
        logfiles=dict(updatelog='instance/log/update.log'))

pull_up35 = ShellCommand(
        command=['/opt/cps-3.5/bin/hgbundler-pull-up', 'instance'],
        description='update',
        env=dict(PATH='/opt/hgbundler/bin:/usr/local/bin:/usr/bin:/bin'),
        logfiles=dict(updatelog='instance/log/update.log'))

PULL_UP = {'3.5': pull_up35, '3.6': pull_up36, 'default': pull_up36}

cps_tests = ShellCommand(command=['instance/Products/CPSUtil/bin/runalltests',
                                  'instance'],
                         env=dict(PATH='/opt/hgbundler/bin:' + ENV_PATH),
                         description='testing')

def make_test_build_factory(bundle_url='', branch='', cps_version='default',
                            zope_version=''):
    builder = BuildFactory()
    builder.addStep(make_instance_cmd(bundle_url, branch,
                                      cps_version=cps_version,
                                      zope_version=zope_version))
    builder.addStep(PULL_UP[cps_version])
    builder.addStep(cps_tests)
    return builder

BUILDER_TO_SLAVES = {}
for name, builders in custom_projects.SLAVES.items():
    for b in builders:
        BUILDER_TO_SLAVES.setdefault(b, []).append(name)

from buildbot.config import BuilderConfig

def add_builder(builders, name, **kw):
    """Instantiate a builder and add it to builders list.

    Slaves are inferred from the BUILDER_TO_SLAVES dict (built from
    custom_projects module)
    """
    slavenames = BUILDER_TO_SLAVES[name]
    if not slavenames:
        # no slave for this builder in cred config
        return
    builders.append(BuilderConfig(name=name, slavenames=slavenames, **kw))


c['builders'] = []

for descr in custom_projects.BUILDERS:
    name = descr.pop('name')
    factory = make_test_build_factory(**descr)
    add_builder(c['builders'], name, factory=factory)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "CPS Generic"
c['titleURL'] = "http://cps-cms.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

